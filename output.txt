use crate::{
    cli::Cli, constants::rpc::Command, contact::Contact, kademlia_id::KademliaID,
    networking::Networking, routing_table::RoutingTable, utils,
};
pub struct Kademlia {
    route_table: RoutingTable,
    cli: Cli,
}

impl Kademlia {
    pub fn new() -> Self {
        let kad_id = KademliaID::new();
        let addr = utils::get_own_address();
        println!("my addr is {}", addr);
        let contact: Contact = Contact::new(kad_id, addr);
        Self {
            route_table: RoutingTable::new(contact),
            cli: Cli::new(),
        }
    }

    pub async fn listen(&mut self, addr: &str) {
        Networking::listen_for_rpc(addr).await;
    }

    pub async fn join(&mut self) {
        if utils::check_bn() {
            return;
        }
        let adr: String = utils::boot_node_address();
        let boot_node_addr: String = format!("{}:{}", adr, "5678");
        println!("Boot node address: {}", boot_node_addr);

        Networking::send_rpc_request(&boot_node_addr, Command::PING)
            .await
            .expect("failed to send PING");
    }

    pub async fn start_cli(&mut self) {
        self.cli.read_input().await;
    }
}
use crate::contact::Contact;
use crate::kademlia_id::KademliaID;
use std::collections::LinkedList;

#[derive(Clone)]
pub struct Bucket {
    list: LinkedList<Contact>,
}

impl Bucket {

    pub fn new() -> Self {
        Self {
            list: LinkedList::<Contact>::new(),
        }
    }
    pub fn add_contact(&mut self, contact: Contact) -> &Self {
        self.list.push_back(contact);
        self
    }

    pub fn get_contact_and_calc_distance(&mut self, target: KademliaID) -> Vec<Contact> {
        let mut contacts: Vec<Contact> = Vec::new();
        for contact in self.list.iter_mut() {
            contact.calc_distance(&target);
            contacts.push(contact.clone());
        }
        contacts
    }

    pub fn len(&self) -> usize {
        self.list.len()
    }
}
use ::tokio::io::{self, AsyncBufReadExt, AsyncWriteExt};

enum Command {
    GET(String),
    PUT(String),
    EXIT,
}

pub struct Cli {}

impl Cli {
    pub fn new() -> Self {
        Cli {}
    }

    pub async fn read_input(&self) {
        let stdin = io::stdin();
        let mut reader = io::BufReader::new(stdin).lines();

        loop {
            io::stdout().flush().await.unwrap();

            if let Some(line) = reader.next_line().await.unwrap() {
                let input = line.trim().to_lowercase();

                match self.parse_command(&input) {
                    Ok(command) => {
                        if let Command::EXIT = command {
                            println!("bombaclat node");
                            break;
                        }
                        self.execute_command(command).await;
                    }
                    Err(e) => {
                        println!("Error: {}", e);
                    }
                }
            }
        }
    }

    async fn execute_command(&self, cmd: Command) {
        match cmd {
            Command::GET(hash) => {
                //.lookup_data(hash).await.unwrap();
                println!("get ");
            }
            Command::PUT(data) => {
                println!("thingy");
                // let data = data.as_bytes().to_vec();
                //client.store(data).await.unwrap();
            }
            Command::EXIT => {
                println!("Exiting...");
            }
        }
    }

    fn parse_command(&self, input: &str) -> Result<Command, &'static str> {
        let mut parts = input.split_whitespace();
        let command = parts.next().unwrap_or_default();

        match command {
            "get" => {
                if let Some(arg) = parts.next() {
                    Ok(Command::GET(arg.to_string()))
                } else {
                    Err("GET: missing hash argument")
                }
            }
            "put" => {
                if let Some(arg) = parts.next() {
                    Ok(Command::PUT(arg.to_string()))
                } else {
                    Err("PUT: missing data argument")
                }
            }
            "exit" => Ok(Command::EXIT),
            _ => Err("Unknown command"),
        }
    }
}
use std::env;
use std::process;
pub fn check_bn() -> bool {
    let bn_value = env::var("BN").unwrap_or_else(|_| "0".to_string());
    bn_value == "1"
}

pub fn boot_node_address() -> String {
    if !check_bn() {
        match env::var("BNAD") {
            Ok(boot_node_address) => boot_node_address,
            Err(_) => "unset".to_string(),
        }
    } else {
        "BN is not set".to_string()
    }
}

pub fn get_own_address() -> String {
    #[cfg(feature = "local")]
    {
        "127.0.0.1".to_string()
    }

    #[cfg(not(feature = "local"))]
    {
        let output = process::Command::new("hostname")
            .arg("-i")
            .output()
            .expect("failed to execute hostname command");
        String::from_utf8(output.stdout).unwrap().trim().to_string()
    }
}
use crate::{
    bucket::Bucket,
    constants::{BUCKET_SIZE, ID_LENGTH, RT_BCKT_SIZE},
    contact::Contact,
    contact::ContactCandidates,
    kademlia_id::KademliaID,
};

#[derive(Clone)]
pub struct RoutingTable {
    me: Contact,
    buckets: [Option<Bucket>; RT_BCKT_SIZE],
}

impl RoutingTable {
    pub fn new(me: Contact) -> Self {
        Self {
            me,
            buckets: std::array::from_fn(|_| None),
        }
    }

    pub fn get_bucket_index(&mut self, id: KademliaID) -> usize {
        let distance: KademliaID = self.me.calc_distance(&id).get_distance();
        distance
            .id
            .iter()
            .flat_map(|&byte| (0..8).rev().map(move |i| (byte >> i) & 1))
            .position(|bit| bit != 0)
            .unwrap_or(RT_BCKT_SIZE - 1)
    }

    pub fn add_contact(&mut self, contact: Contact) {
        let index: usize = self.get_bucket_index(contact.id.clone());
        match &mut self.buckets[index] {
            Some(bucket) => {
                bucket.add_contact(contact);
            }
            None => {
                let mut bucket = Bucket::new();
                bucket.add_contact(contact);
                self.buckets[index] = Some(bucket);
            }
        }
    }

    pub fn find_closest_contacts(&mut self, target: KademliaID, count: usize) -> Vec<Contact> {
        let mut candidates = ContactCandidates::new();
        let bucket_index = self.get_bucket_index(target);
        if let Some(bucket) = self.buckets[bucket_index].as_mut() {
            let mut contacts = bucket.get_contact_and_calc_distance(target);
            candidates.append(&mut contacts);
        }
        let mut i = 0;
        while (bucket_index as isize - i as isize >= 0 || bucket_index + i < ID_LENGTH * 8)
            && candidates.len() < count
        {
            if bucket_index - i >= 0 {
                if let Some(bucket_) = self.buckets[bucket_index - 1].as_mut() {
                    let mut cntcs = bucket_.get_contact_and_calc_distance(target);
                    candidates.append(&mut cntcs);
                }
                if let Some(bucket_) = self.buckets[bucket_index + 1].as_mut() {
                    let mut cntcs = bucket_.get_contact_and_calc_distance(target);
                    candidates.append(&mut cntcs);
                }
            }
            i = i + 1;
        }
        candidates.sort();
        let mut count_ = count;
        if count_ > candidates.len() {
            count_ = candidates.len();
        }
        candidates.get_contacts(count_).to_vec()
    }
}
use crate::constants::rpc::Command;
use crate::kademlia_id::KademliaID;
use serde::{Deserialize, Serialize};
#[derive(Serialize, Deserialize, Debug)]
pub enum RpcMessage {
    Request {
        id: KademliaID,
        method: Command,
        params: Vec<String>,
    },
    Response {
        id: KademliaID,
        result: Command,
    },
    Error {
        id: KademliaID,
        message: String,
    },
}
#[cfg(test)]
mod tests {
    use crate::kademlia_id::KademliaID;
    #[test]
    fn xor_metric() {
        let kad_id_1: KademliaID = KademliaID::new();
        //assert_eq!(kad_id_1.distance(&kad_id_1.clone()));

        let kad_id_2: KademliaID = KademliaID::new();
        // assert_eq!(kad_id_1.distance(&kad_id_2) > 0, true);
    }

    #[test]
    fn xor_metric_triangle_inequality() {
        /*  let kad_id_1 = KademliaID::new();
            let kad_id_2 = KademliaID::new();
            let kad_id_3 = KademliaID::new();
            let ab = kad_id_1.distance(&kad_id_2);
            let bc = kad_id_2.distance(&kad_id_3);
            let ac = kad_id_1.distance(&kad_id_3);
            assert!(ab + bc >= ac, "Triangle inequality failed");
        */
    }

    #[test]
    fn hash_data() {
        let kad_id = KademliaID::new().store_data("test".to_string()).to_hex();
        let kad_id2 = KademliaID::new().store_data("test".to_string()).to_hex();
        assert_eq!(kad_id, kad_id2, "Don't have same hash");
    }
}
use {
    crate::constants::ID_LENGTH,
    rand::Rng,
    serde::{Deserialize, Serialize},
    sha2::{Digest, Sha256},
    std::cmp::*,
};

type KadId = [u8; ID_LENGTH];

#[derive(Serialize, Deserialize, Debug, Clone, Copy)]
pub struct KademliaID {
    pub id: KadId,
}

impl KademliaID {
    pub fn new() -> Self {
        let mut id: KadId = [0u8; ID_LENGTH];
        rand::thread_rng().fill(&mut id[..]);
        Self { id }
    }

    pub fn from_hex(hex: String) -> Self {
        let id: KadId = hex
            .as_bytes()
            .chunks(2)
            .map(|chunk| {
                let high = (chunk[0] as char).to_digit(16).unwrap();
                let low = (chunk[1] as char).to_digit(16).unwrap();
                ((high << 4) | low) as u8
            })
            .collect::<Vec<u8>>()
            .try_into()
            .expect("invalid kademlia id ");
        Self { id }
    }

    pub fn with_id(id: KadId) -> Self {
        Self { id }
    }

    pub fn store_data(&mut self, data: String) -> Self {
        let hash = Sha256::digest(data.as_bytes());
        self.id.copy_from_slice(&hash[..ID_LENGTH]);
        *self
    }

    pub fn to_hex(&self) -> String {
        self.id.iter().map(|byte| format!("{:02x}", byte)).collect()
    }

    pub fn less(&self, other: &KademliaID) -> bool {
        self.id
            .iter()
            .zip(other.id.iter())
            .find(|(a, b)| a != b)
            .map_or(false, |(a, b)| a < b)
    }

    pub fn equals(&self, other: &KademliaID) -> bool {
        self.id.iter().zip(other.id.iter()).all(|(a, b)| a == b)
    }
    pub fn distance(&self, other: &KademliaID) -> KademliaID {
        KademliaID::with_id(core::array::from_fn(|i| self.id[i] ^ other.id[i]))
    }
}

impl PartialEq for KademliaID {
    fn eq(&self, other: &Self) -> bool {
        self.equals(other)
    }
}
impl Eq for KademliaID {}

impl PartialOrd for KademliaID {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl Ord for KademliaID {
    fn cmp(&self, other: &Self) -> Ordering {
        if self.less(other) {
            Ordering::Less
        } else if other.less(self) {
            Ordering::Greater
        } else {
            Ordering::Equal
        }
    }
}
use crate::kademlia_id::KademliaID;
use std::cmp::Ordering;

#[derive(Clone)]
pub struct Contact {
    pub id: KademliaID,
    address: String,
    distance: Option<KademliaID>,
}

type Contacts = Vec<Contact>;

impl Contact {
    pub fn new(id: KademliaID, address: String) -> Self {
        Self {
            id,
            address,
            distance: None,
        }
    }

    pub fn contact_from_hex(hex: String, address: String) -> Self {
        Self {
            id: KademliaID::from_hex(hex),
            address,
            distance: None,
        }
    }

    pub fn calc_distance(&mut self, target: &KademliaID) -> &mut Self {
        self.distance = Some(target.distance(&self.id));
        self
    }

    pub fn get_distance(&self) -> KademliaID {
        self.distance
            .expect("error no distance was set for contact")
    }

    pub fn less(&self, other: Contact) -> bool {
        self.get_distance().less(&other.get_distance())
    }
}

pub struct ContactCandidates {
    contacts: Contacts,
}

impl ContactCandidates {
    pub fn new() -> Self {
        Self {
            contacts: Vec::new(),
        }
    }
    pub fn append(&mut self, contacts: &mut Contacts) -> &mut Self {
        self.contacts.append(contacts);
        self
    }

    pub fn sort(&mut self) {
        self.contacts
            .sort_by(|a, b| a.get_distance().cmp(&b.get_distance()));
    }

    pub fn len(&self) -> usize {
        self.contacts.len()
    }

    pub fn get_contacts(&mut self, count: usize) -> &mut [Contact] {
        let len = self.contacts.len();
        let end = count.min(len);
        &mut self.contacts[0..end]
    }

    pub fn swap(&mut self, i: usize, j: usize) {
        self.contacts.swap(i, j);
    }

    pub fn less(&self, i: usize, j: usize) -> bool {
        self.contacts[i].less(self.contacts[j].clone())
    }
}
use {
    crate::{constants::rpc::Command, rpc::RpcMessage},
    bincode::{deserialize, serialize},
    tokio::net::lookup_host,
    tokio::net::ToSocketAddrs,
    tokio::net::UdpSocket,
};

pub struct Networking;

impl Networking {
    pub async fn send_rpc_request(target_addr: &str, cmd: Command) -> std::io::Result<()> {
        let socket = UdpSocket::bind("0.0.0.0:0").await?;
        let ping_msg = cmd;
        let rpc_msg = RpcMessage::Request {
            id: crate::kademlia_id::KademliaID::new(),
            method: ping_msg,
            params: vec!["alice".to_string()],
        };
        for addr in lookup_host(target_addr).await? {
            println!("addr is {:?}", addr);
            let address = addr;
            let bin_data = bincode::serialize(&rpc_msg).expect("failed to serialize data");
            socket.send_to(&bin_data, &address).await?;
            println!("Sent PING to {}", &address);
            break;
        }
        Ok(())
    }

    pub async fn send_rpc_response(target_addr: &str, cmd: Command) -> tokio::io::Result<()> {
        let socket = UdpSocket::bind("0.0.0.0:0").await?;
        let rpc_msg = RpcMessage::Response {
            id: crate::kademlia_id::KademliaID::new(),
            result: cmd,
        };
        let bin_data = bincode::serialize(&rpc_msg).expect("Failed to serialize response");
        let target = format!("{}:5678", target_addr);
        socket.send_to(&bin_data, &target).await?;
        println!("Sent response (PONG or other) to {}", target);
        Ok(())
    }

    pub async fn listen_for_rpc(bind_addr: &str) -> std::io::Result<()> {
        let socket = UdpSocket::bind(bind_addr).await?;
        println!("Listening for RPC messages on {}", bind_addr);

        let mut buf = [0u8; 1024];

        loop {
            let (len, src) = socket.recv_from(&mut buf).await?;

            let received_msg: RpcMessage =
                bincode::deserialize(&buf[..len]).expect("failed to deserialize data");

            match received_msg {
                RpcMessage::Request { id, method, params } => match method {
                    Command::PING => {
                        println!(
                            "Received PING from {} rpc id {} with params: {:?}",
                            src,
                            id.to_hex(),
                            params
                        );
                        let src_ip = src.ip().to_string();
                        let dest_cp = src_ip.clone();
                        tokio::spawn(async move {
                            Networking::send_rpc_response(&src_ip, Command::PONG)
                                .await
                                .expect("no response was sent");
                        });

                        println!("Sent PONG to {}", dest_cp);
                    }
                    _ => {
                        println!("Received unexpected command from {}", src);
                    }
                },
                RpcMessage::Response { id, result } => {
                    println!(
                        "Received Response with ID {} and result: {:?}",
                        id.to_hex(),
                        result
                    );
                }
                RpcMessage::Error { id, message } => {
                    println!("Received Error with ID {}: {}", id.to_hex(), message);
                }
            }
        }
    }
}
pub const ID_LENGTH: usize = 20;
pub const BUCKET_SIZE: usize = 20;
pub const ALPHA: usize = 3;
pub const RT_BCKT_SIZE: usize = ID_LENGTH << 3;

pub mod rpc {
    use serde::{Deserialize, Serialize};

    #[derive(Serialize, Deserialize, Debug)]
    pub enum Command {
        PING,
        PONG,
        FINDNODE,
        FINDVALUE,
    }
}

pub const ALL_IPV4: &str = "0.0.0.0";
pub mod bucket;
pub mod cli;
pub mod constants;
pub mod contact;
pub mod kademlia;
pub mod kademlia_id;
pub mod networking;
pub mod routing_table;
pub mod rpc;
pub mod tests;
pub mod utils;
use {
    axum::{http::StatusCode, routing::get, Json, Router},
    kadrustlia::{
        cli::Cli,
        constants::{rpc::Command, ALL_IPV4},
        contact::Contact,
        kademlia::Kademlia,
        kademlia_id::KademliaID,
        networking::Networking,
        rpc::RpcMessage,
        utils,
    },
    std::net::SocketAddr,
    std::sync::Arc,
    tokio::net::ToSocketAddrs,
    tokio::sync::Mutex,
};

async fn root() -> &'static str {
    "Hello world!"
}

#[tokio::main(flavor = "multi_thread")]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // REST interface ##################
    tokio::spawn(async move {
        let app = Router::new().route("/", get(root));
        let ip = format!("{}:{}", ALL_IPV4, "3000");
        let listener = tokio::net::TcpListener::bind(ip).await.unwrap();
        axum::serve(listener, app).await.unwrap();
    });
    //#################################

    let bind_addr = format!("{}:{}", ALL_IPV4, "5678");

    tokio::spawn(async move {
        Networking::listen_for_rpc(&bind_addr)
            .await
            .expect("Failed to listen for PING");
    });

    let kadid = KademliaID::new();
    let hex = kadid.to_hex();
    let kadid2 = KademliaID::from_hex(hex.clone());
    assert_eq!(kadid, kadid2);
    let kademlia_instance = Arc::new(Mutex::new(Kademlia::new()));
    let kademlia_for_join = Arc::clone(&kademlia_instance);
    let kademlia_for_cli = Arc::clone(&kademlia_instance);

    tokio::join!(
        async {
            let mut instance = kademlia_for_join.lock().await;
            instance.join().await;
        },
        async {
            let mut instance = kademlia_for_cli.lock().await;
            instance.start_cli().await;
        }
    );
    Ok(())
}
